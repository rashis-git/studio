rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is the owner of the data.
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow create: if isOwner(userId);
      // Allow server-side reads for report generation
      allow read: if isOwner(userId) || request.auth == null;
      allow update, delete: if isOwner(userId);

      // Rules for the 'savedActivities' sub-collection
      match /savedActivities/{activityId} {
        allow read, write, delete: if isOwner(userId);
      }
    }

    // Rules for the 'activity-logs' collection
    match /activity-logs/{logId} {
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;

      // Allow reads for owners and for server-side queries that filter by userId
      allow read: if isOwner(resource.data.userId);
      allow list: if (request.auth != null && request.query.where.size() > 0 && request.query.where[0][0] == 'userId' && request.query.where[0][2] == request.auth.uid) || (request.auth == null && request.query.where.size() > 0 && request.query.where[0][0] == 'userId');
    }

    // Rules for the 'state-logs' (mood) collection
    match /state-logs/{logId} {
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;

      // Allow reads for owners and for server-side queries that filter by userId
      allow read: if isOwner(resource.data.userId);
      allow list: if (request.auth != null && request.query.where.size() > 0 && request.query.where[0][0] == 'userId' && request.query.where[0][2] == request.auth.uid) || (request.auth == null && request.query.where.size() > 0 && request.query.where[0][0] == 'userId');
    }
    
    // Rules for the 'planned-activities' collection
    match /planned-activities/{planId} {
      allow create: if request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isOwner(resource.data.userId);
      allow list: if request.auth != null && request.query.where.size() > 0 && request.query.where[0][0] == 'userId' && request.query.where[0][2] == request.auth.uid;
    }

    // Rules for notification preferences
    match /notification-preferences/{userId} {
      allow read, write: if isOwner(userId);
    }
  }
}
