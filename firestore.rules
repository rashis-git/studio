
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is the owner of the data.
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow read: if isOwner(userId) || request.auth == null; // Allow server to read user profile (e.g., for goals)
      allow update, delete: if isOwner(userId);

      // Rules for the 'savedActivities' sub-collection
      match /savedActivities/{activityId} {
        allow read, write, delete: if isOwner(userId);
      }
    }

    // Rules for the 'activity-logs' collection
    match /activity-logs/{logId} {
      allow create: if isOwner(request.resource.data.userId);

      // Allow a user to read their own specific log document.
      allow get: if isOwner(resource.data.userId);

      // Allow a user to query for their own logs.
      // Allow a server process (unauthenticated) to query logs ONLY if filtering by a userId.
      allow list: if (isOwner(request.query.filters[0].value)) ||
                   (request.auth == null && request.query.filters[0].field.string_value == 'userId');

      allow update, delete: if false; // Logs are immutable
    }

    // Rules for the 'state-logs' (mood) collection
    match /state-logs/{logId} {
      allow create: if isOwner(request.resource.data.userId);
      
      // Allow a user to read their own specific mood log.
      allow get: if isOwner(resource.data.userId);

      // Allow a user to query for their own logs.
      // Allow a server process (unauthenticated) to query logs ONLY if filtering by a userId.
      allow list: if (isOwner(request.query.filters[0].value)) ||
                   (request.auth == null && request.query.filters[0].field.string_value == 'userId');

      allow update, delete: if false; // Logs are immutable
    }
    
    // Rules for the 'planned-activities' collection
    match /planned-activities/{planId} {
      // A user can manage their own planned activities.
      allow read, write, delete: if isOwner(resource.data.userId) || isOwner(request.resource.data.userId);
    }

    // Rules for notification preferences
    match /notification-preferences/{userId} {
      // A user can read and write their own notification preferences.
      allow read, write: if isOwner(userId);
    }
  }
}
